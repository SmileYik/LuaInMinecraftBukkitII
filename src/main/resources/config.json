{
  // 项目资源地址, 用于下载预编译好的动态链接库
  "projectUrl": "https://raw.githubusercontent.com/SmileYik/LuaInMinecraftBukkitII/refs/tags/resources-1.0.8",
  // 选择插件使用的lua版本
  "luaVersion": "lua-5.4.8",
  // 总是检查依赖库Hash是否正确.
  // 若启用该选项, 则会每次启动服务器时, 校验依赖文件于线上中的依赖文件是否相同, 并获取最新的依赖文件.
  "alwaysCheckHashes": false,
  // debug 标志
  "debug": false,
  // 是否启用 bStats 统计信息
  "bStats": true,
  // lua 反射设置
  "luaReflection": {
    // lua 所使用的反射类型, 目前可用反射类型如下:
    // org.eu.smileyik.luaInMinecraftBukkitII.reflect.FastReflection:
    //     基于字节码生成的快速反射, 速度最快, 但是对于某些使用情况下可能会出现问题
    // org.eu.smileyik.luaInMinecraftBukkitII.reflect.MixedFastReflection:
    //     与 FastReflection 相同, 但在调用失败的情况下会回退到 Java 自带的标准反射
    // default:
    //     Java 自带的标准反射.
    "type": "default",
    // 反射缓存容量, 具体指最多缓存多少条缓存记录, 字段, 方法, 构造器的缓存记录都相互独立.
    "cacheCapacity": 1024
  },
  "luaState": {
    // lua 环境 id
    "default": {
      // 该环境运行在哪个目录下, "/" 代表插件目录下的 luaState 目录.
      "rootDir": "/",
      // 是否忽略访问限制, 忽略访问限制时可以强制访问java中的私有方法.
      "ignoreAccessLimit": false,
      // 当 lua 调用的方法拥有多种符合要求的结果时, 自动运行首个方法而不是抛出异常
      "justUseFirstMethod": true,
      // 初始化脚本列表
      "initialization": [
        // 可以加载多个脚本文件
        {
          // 脚本文件名, 需要能在rootDir设置的文件夹中寻找的到.
          "file": "test.lua",
          // 脚本异步加载, 若启用, 则该脚本在初始化时, 将不会在 Bukkit 主线程中运行.
          "asyncLoad": false,
          // 该脚本所依赖插件, 是插件列表
          // 例如: "depends": ["PlaceholderAPI"], 则将会在 PlaceholderAPI 插件加载时, 才会加载该脚本.
          "depends": []
        }
      ],
      // 自动重载设置, 当初始化脚本列表中包含的脚本文件发送更改时自动重载 Lua 环境
      // 需要注意的是, 重载脚本时, 重载方式为硬重载.
      "autoReload": {
        "enable": true,
        "blacklist": [
          "block-reload.lua"
        ],
        // 检测频率, 毫秒
        "frequency": 60000
      },
      // Lua 池设置
      // Lua 池可以突破 Lua 的单线程限制, 将 Lua 闭包转移至 Lua 池中的状态机中运行, 并在运行完闭后, 将闭包返回的结果返回至主状态机中.
      "pool": {
        // 是否启用
        "enable": true,
        // Lua 池类型
        "type": "org.eu.smileyik.luaInMinecraftBukkitII.luaState.pool.simplePool.SimpleLuaPool",
        // Lua 池中最大 Lua 状态机数量
        "maxSize": 2,
        // 允许空闲中的 Lua 状态机数量
        "idleSize": 1,
        // 当状态机空闲多少时间(毫秒)时会将其清理. 注意: 仅在空闲状态机数量大于 `idleSize` 中设定的数量时才会进行清理.
        "idleTimeout": 6000000
      }
    }
  },
  // 需要加载的模组, 目前可用模组有 "cffi", "jni-bridge"
  "enableModules": [
    "cffi",
    "jni-bridge"
  ]
}